name: Python application

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  unit_tests:
    runs-on: ubuntu-latest
    name: Unit tests
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry --version
      - name: Install dependencies
        run: |
          poetry install --no-interaction --all-groups
      - name: Run tests
        run: |
          poetry run coverage run -m pytest test/sqlpinger/unit
          poetry run coverage xml
          echo "Code coverage report:"
          poetry run coverage report
          ls -ls
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
  release:
    runs-on: ubuntu-latest
    name: Versioning and release
    needs: [unit_tests]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install Poetry
      run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry --version
    - name: Install python-semantic-release
      run: |
        pip install python-semantic-release
    - name: Release
      id: release
      run: |
        echo "ðŸ”¹Using semantic-release to generate the release version"
        semantic-release version --vcs-release --tag
      
        echo "ðŸ”¹Getting the generated tag"
        GENERATED_TAG=$(git describe --tags --abbrev=0)
        echo "Generated tag: $GENERATED_TAG"
        
        echo "ðŸ”¹Setting the tag as an environment variable to be used in subsequent steps"
        echo "tag=$GENERATED_TAG" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Upload artifacts on release
      id: upload
      uses: softprops/action-gh-release@v1
      if: steps.release.outputs.released == 'true'
      with:
        tag_name: ${{ steps.release.outputs.tag }}
        files: "dist/*"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
